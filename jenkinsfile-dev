pipeline {
  agent any
    options {
        BUILDDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBUILDs()
        timeout (time: 60, unit: 'MINUTES')
        timestamps()
      }
      
      
          environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}
     
     
        stages {
    
        stage('Setup parameters') {
                steps {
                    script { 
                        properties([
                            parameters([
    
                                string(
                                    defaultValue: 'main', 
                                    name: 'branch', 
                                    trim: true
                                ),

    
                                choice(
                                    choices: ['9090', '9091','9092', '9093','5050', '5051','7070', '7071'], 
                                    name: 'port'
                                ),
				string(name: 'WARNTIME',
                             defaultValue: '5',
                            description: '''Warning time (in minutes) before starting upgrade'''),



				string(
                                defaultValue: 'develop',
                                name: 'Please_leave_this_section_as_it_is',
                                trim: true
                            ),
			    
                            ])
                        ])
                    }
                }
           } 
        
    
    stage('cloning repo ') {
              
                steps {
                    sh '''
                    sudo rm -rf $WORKSPACE/* 
                    git clone --branch $branch https://github.com/idi10/SESSION-01-DEVELOPMENT
                    cd SESSION-01-DEVELOPMENT
                    '''
                }
            }
    
    
    
            stage('SonarQube analysis') {
                agent {
                docker {
                 
                  image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
               }
                   environment {
            CI = 'true'
            //  scannerHome = tool 'Sonar'
            scannerHome='/opt/sonar-scanner'
        }
                steps{
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
    

    stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}


        
    stage('build appserver') {
      
     steps {
         sh '''
        cd $WORKSPACE/SESSION-01-DEVELOPMENT/yelb-appserver
        docker build -t devopseasylearning2021/idrissa:appserver-${BUILD_NUMBER} . 
        cd -
    
                    '''
                }
            }
    
    
    stage('build yelb-db') {
      
     steps {
         sh '''
        cd $WORKSPACE/SESSION-01-DEVELOPMENT/yelb-db
        docker build -t devopseasylearning2021/idrissa:yelb-db-${BUILD_NUMBER} . 
        cd -
    
                    '''
                }
            }


    stage('build yelb-ui') {
      
     steps {
         sh '''
        cd $WORKSPACE/SESSION-01-DEVELOPMENT/yelb-ui
        docker build -t devopseasylearning2021/idrissa:yelb-ui-${BUILD_NUMBER} . 
        cd -
    
                    '''
                }
            }
       
    stage('push appserver') {
      
     steps {
         sh '''
        cd $WORKSPACE/SESSION-01-DEVELOPMENT/yelb-appserver
        docker push -t devopseasylearning2021/idrissa:appserver-${BUILD_NUMBER}
                    '''
                }
            }
    stage('push yelb-db') {
      
     steps {
         sh '''
        cd $WORKSPACE/SESSION-01-DEVELOPMENT/yelb-db
        docker push -t devopseasylearning2021/idrissa:yelb-db-${BUILD_NUMBER}
                    '''
                }
            }
    
    stage('push yelb-ui') {
      
     steps {
         sh '''
        cd $WORKSPACE/SESSION-01-DEVELOPMENT/yelb-ui
        docker push -t devopseasylearning2021/idrissa:yelb-ui-${BUILD_NUMBER} 
    
                    '''
                }
            }         

    post {
   
   success {
      slackSend (channel: '#development-alerts', color: 'good', message: "SUCCESSFUL:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

 
    unstable {
      slackSend (channel: '#development-alerts', color: 'warning', message: "UNSTABLE:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

    failure {
      slackSend (channel: '#development-alerts', color: '#FF0000', message: "FAILURE:  Branch name  <<${env.BRANCH_NAME}>> Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
   
    cleanup {
      deleteDir()
    }
  }
 }
}
